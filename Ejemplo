import rx
from rx import operators as ops

numbers1 = [1, 2, 3, 4, 5]
numbers2 = [9, 8, 7]

# Observable 1: from_iterable
observable1 = rx.from_iterable(numbers1)

# Operador 1: filter
filtered_observable1 = observable1.pipe(ops.filter(lambda value: value % 2 == 0))

# Suscripci贸n 1
def on_next(value):
    print("Observable 1:", value)

filtered_observable1.subscribe(on_next)

# Operador 2: map
observable1 = observable1.pipe(ops.map(lambda value: value * 2))

# Suscripci贸n 2
def on_next(value):
    print("Observable 1 (map):", value)

observable1.subscribe(on_next)

# Observable 2: from_iterable
observable2 = rx.from_iterable(numbers2)

# Operador 3: merge
observable_merged = rx.merge(observable1, observable2).pipe(
    ops.filter(lambda value: value % 2 == 0)
)

# Suscripci贸n 3
def on_next(value):
    print("Merged Observable:", value)

observable_merged.subscribe(on_next)

# Observable 3: concat
observable1 = rx.from_iterable(numbers1)
observable2 = rx.from_iterable(numbers2)

observable_concat = rx.concat(observable1, observable2).pipe(
    ops.filter(lambda value: value % 2 == 0)
)

# Suscripci贸n 4
def on_next(value):
    print("Concatenated Observable:", value)

observable_concat.subscribe(on_next)
