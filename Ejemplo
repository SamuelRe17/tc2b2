// Definición básica de Observable
class Observable[T](private val elements: List[T]) {
  def subscribe(onNext: T => Unit): Unit = {
    elements.foreach(onNext)
  }

  // Operador: map
  def map[R](f: T => R): Observable[R] = {
    new Observable[R](elements.map(f))
  }

  // Operador: filter
  def filter(predicate: T => Boolean): Observable[T] = {
    new Observable[T](elements.filter(predicate))
  }

  // Operador: merge (simplificado)
  def merge(another: Observable[T]): Observable[T] = {
    new Observable[T](elements ++ another.elements)
  }
}

// Ejemplo de uso básico

  val source1 = new Observable[Int](List(1, 2, 3))
  val source2 = new Observable[Int](List(4, 5, 6))

  // Usar operadores
  val mapped = source1.map(_ * 2)
  val filtered = mapped.filter(_ % 4 == 0)
  val merged = filtered.merge(source2)

  // Suscribirse y observar
  merged.subscribe(println)

