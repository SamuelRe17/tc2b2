class Observable[T](private val elements: List[T]) {
  
  // Método: Promedio de elementos (esto es solo un ejemplo, para adaptarse a tu estilo)
  def average(f: T => Int): Double = {
    val n = elements.length
    val sum = elements.map(f).sum.toDouble
    sum / n
  }

  // Método: Desviación estándar de elementos (esto es solo un ejemplo, para adaptarse a tu estilo)
  def standardDeviation(f: T => Int): Double = {
    val n = elements.length
    val avg = average(f)
    math.sqrt(elements.map(f).map(x => math.pow(x - avg, 2)).sum / (n - 1))
  }

  // Operador: map
  def map[R](f: T => R): Observable[R] = {
    val transformedElements = elements.map(f)
    new Observable[R](transformedElements)
  }

  // Operador: filter
  def filter(predicate: T => Boolean): Observable[T] = {
    val filteredElements = elements.filter(predicate)
    new Observable[T](filteredElements)
  }

  // Operador: merge (simplificado)
  def merge(another: Observable[T]): Observable[T] = {
    val mergedElements = elements ++ another.elements
    new Observable[T](mergedElements)
  }

  // Método para suscribirse (solo un ejemplo para adaptarse a tu estilo)
  def display(f: T => String): Unit = {
    elements.map(f).foreach(println)
  }
}

// Ejemplo de uso básico basado en tu estilo
val source1 = new Observable[Int](List(1, 2, 3))
val source2 = new Observable[Int](List(4, 5, 6))

// Usar operadores
val mapped = source1.map(_ * 2)
val filtered = mapped.filter(_ % 4 == 0)
val merged = filtered.merge(source2)

// Suscribirse y mostrar
merged.display(_.toString)
