# Programación Reactiva

La programación reactiva se enfoca en 2 conceptos claves, estos son:

* Asincronía: Es cuando se adapta a situaciones en las que los eventos ocurren de forma no lineal o en tiempo real.

* Flujo de Datos: En lugar de manejar datos de forma secuencial, como en la programación estructurada, la programación reactiva se centra en flujos continuos de datos.

## Manifiesto Reactivo

El manifiesto reactivo establece los principios en los cuales se basa la programación reactiva, los cuales son:

* Responsivo: El sistema debe responder en un tiempo razonable.
* Resiliente: El sistema debe ser capaz de manejar errores y recuperarse de fallos.
* Elastico: El sistema debe ser capaz de adaptarse a la carga y escalar de manera eficiente.
* Basado en flujos: Se debe manejar la propagación de cambios y eventos como flujos continuos de datos.
* Desacoplado: Los componentes del sistema deben ser independientes y no tener conocimiento directo entre ellos.

## Patrón Observer

el patrón Observer se utiliza para observar y reaccionar a cambios en un flujo de datos o en un objeto observable. Cuando el objeto observable experimenta un cambio, notifica automáticamente a todos sus observadores, permitiendo así que puedan tomar medidas adecuadas en respuesta a esos cambios.

## Ventajas y Desventajas

Como "Ventajas" de la programación reactiva contamos con:

* Responsividad: Mejora la capacidad de respuesta y la experiencia del usuario al manejar eventos y cambios en tiempo real de manera eficiente.
* Escalabilidad: Ofrece herramientas y patrones que facilitan el diseño de sistemas escalables, permitiendo manejar grandes volúmenes de datos y usuarios.
* Desacoplamiento: Promueve un diseño desacoplado entre componentes y servicios, lo que facilita la modularidad, reutilización y mantenibilidad del código.

Como "Desventajas" contamos con:

* Complejidad: En algunos casos, la programación reactiva puede introducir una complejidad adicional en el diseño y la implementación del sistema, especialmente para aplicaciones más simples o menos asincrónicas.
* Consumo de Recursos: Dependiendo de cómo se implemente, la programación reactiva puede requerir un mayor consumo de recursos.
* Sobreingeniería: Existe el riesgo de caer en la sobreingeniería al adoptar la programación reactiva en situaciones donde no proporciona beneficios significativos o adecuados para los requisitos del proyecto.

## Frameworks Reactivos

Los frameworks reactivos son conjuntos de herramientas, bibliotecas y patrones que facilitan el desarrollo de sistemas que responden de manera eficiente y resiliente a eventos y cambios en el entorno. Las aplicaciones que requieren interacción en tiempo real, como juegos, sistemas de chat y aplicaciones de transmisión en vivo, se benefician de los patrones y abstracciones ofrecidos por los frameworks reactivos. Entre los frameworks reactivos tenemos como la más popular a:

* RxJava: Como mencioné anteriormente, RxJava es una extensión de ReactiveX para el lenguaje Java. Proporciona constructores como Observable y Observer para trabajar con flujos de datos y una amplia variedad de operadores para manipular estos flujos.

## Operadores

Los operadores son funciones que permiten transformar, combinar, filtrar y manipular flujos de datos de diversas maneras. Estos operadores facilitan la creación de flujos de datos más complejos y ayudan a manejar el flujo de eventos de manera eficiente. Entre ellos contamos con:

* Operadores de creación: create(), just(), fromArray().
* Operadores de transformación: map(), flatmap(), switchmap()
* Operadores de filtrado: filter(), take(), distinct()
* Operadores de combinación: merge(), concat(), zip()
* Operadores de error: catchError()
* Operadores de utilidad: suscribe(), delay(), timeout()

